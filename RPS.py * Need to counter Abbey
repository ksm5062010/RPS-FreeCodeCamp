def player(prev_play, opponent_history=[], my_history=[]):
    if not prev_play:
        opponent_history.clear()
        my_history.clear()
        my_history.append("S")  # Start with 'S' to test for Kris
        return "S"
    else:
        opponent_history.append(prev_play)

    def counter(move):
        return {'R': 'P', 'P': 'S', 'S': 'R'}[move]

    # Kris Counter
    if len(opponent_history) >= 3 and len(my_history) >= 2:
        # Kris signature: starts with 'P', then counters your last moves
        if (opponent_history[0] == "P" and
            opponent_history[1] == counter(my_history[0]) and
            opponent_history[2] == counter(my_history[1])):
            
            # Start using SPR loop
            spr_pattern = ["S", "P", "R"]
            move = spr_pattern[len(my_history) % 3]
            my_history.append(move)
            return move

    # Quincy Counter
    if len(opponent_history) >= 5 and opponent_history[:5] == ["R", "P", "P", "S", "R"]:
        move = ["P", "S", "S", "R", "P"][len(opponent_history) % 5]
        my_history.append(move)
        return move

    # Mrugesh Counter
    if len(opponent_history) >= 4:
        # Detect move repetition (Mrugesh's weakness)
        if opponent_history[-1] == opponent_history[-2]:
            move = counter(opponent_history[-1])
            my_history.append(move)
            return move
        # Avoid being predictable
        if len(set(my_history[-3:])) == 1:
            move = counter(counter(my_history[-1]))  # Switch it up
            my_history.append(move)
            return move

    # Default Strategy
    default_pattern = ["R", "P", "S"]
    move = default_pattern[len(my_history) % 3]
    my_history.append(move)
    return move
